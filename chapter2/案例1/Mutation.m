function ret = Mutation(pmutation, lenchrom, chrom, sizepop, pop, bound)
% 本函数完成变异操作, 公式见书式（2-6）
% pmutation             input  : 变异概率
% lenchrom              input  : 染色体长度
% chrom                 input  : 染色体群
% sizepop               input  : 种群规模
% pop                   input  : 当前种群的进化代数和最大的进化代数信息
% bound                 input  : 变量范围
% ret                   output : 变异后的染色体

for i = 1 : sizepop  
    % 随机选择一个染色体进行变异
    pick = rand;
    while pick == 0
        pick = rand;
    end
    index = ceil(pick * sizepop);
    % 变异概率决定该轮循环是否进行变异
    pick = rand;
    if pick > pmutation
        continue;
    end
    flag = 0;
    while flag == 0
        % 变异位置
        pick = rand;
        while pick == 0
            pick = rand;
        end
        % 随机选择了染色体变异的位置，即选择了第pos个变量进行变异
        pos = ceil(pick * sum(lenchrom)); 
        v = chrom(i, pos);
        v1 = v - bound(pos, 1);
        v2 = bound(pos, 2) - v;
        pick = rand; %变异开始
        if pick > 0.5
            delta = v2 * (1 - pick ^ ((1 - pop(1) / pop(2)) ^ 2));
            chrom(i, pos) = v + delta;
        else
            delta = v1 * (1 - pick ^ ((1 - pop(1) / pop(2)) ^ 2));
            chrom(i, pos) = v - delta;
        end   % 变异结束
        flag = test(lenchrom, bound, chrom(i, :));     % 检验染色体的可行性
    end
end
ret = chrom;